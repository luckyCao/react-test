{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA;;;AAGA,MAAM,UAAU,GAAhB;AACA,MAAM,YAAY,GAAlB;AACA,MAAM,WAAW,GAAjB;AACA,eAAe,UAAU,UAAS,EAAT,EAAY;AACjC,QAAI,QAAQ,OAAZ;AAAA,QACI,WAAW,EADf;AAAA,QAEI,QAAQ,IAFZ;;AAIA,aAAS,MAAT,CAAgB,GAAhB,EAAoB;AAChB,YAAG,UAAU,OAAb,EAAqB;AACjB,qBAAS,IAAT,CAAc,GAAd;AACH;AACD,YAAG,UAAU,SAAb,EAAuB;AACnB,gBAAI,WAAJ,CAAgB,KAAhB;AACH;AACD,YAAG,UAAU,QAAb,EAAsB;AAClB,gBAAI,UAAJ,CAAe,KAAf;AACH;AACJ;AACD,SAAK,IAAL,GAAY,UAAS,WAAT,EAAqB,UAArB,EAAgC;AACxC,eAAO;AACH,yBAAY,WADT;AAEH,wBAAW;AAFR,SAAP;AAIH,KALD;AAMA,SAAK,IAAL,GAAY,UAAS,SAAT,EAAmB,QAAnB,EAA4B;AACpC,YAAI,OAAO,IAAX;AACA,eAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAS,MAAT,KAAkB;AACjC,iBAAK,IAAL,CAAW,IAAD,IAAQ;AACd,wBAAQ,UAAU,IAAV,CAAR;AAAyB,aAD7B,EAC8B,MAAI,CAAE,CADpC;AAEH,SAHM,CAAP;AAIH,KAND;;AAQA,aAAS,SAAT,CAAmB,GAAnB,EAAuB;AACnB,gBAAQ,GAAR;AACA,gBAAQ,SAAR;AACA,iBAAS,GAAT,CAAa,QAAM;AACf,mBAAO,IAAP;AACH,SAFD;AAGH;AACD,aAAS,QAAT,CAAkB,GAAlB,EAAsB;AAClB,gBAAQ,GAAR;AACA,gBAAQ,QAAR;AACA,iBAAS,GAAT,CAAa,QAAM;AACf,mBAAO,IAAP;AACH,SAFD;AAGH;AACD,aAAS,SAAT,CAAmB,GAAnB,EAAuB;AACnB,YAAG,OAAO,CAAC,IAAI,IAAf,EAAoB;AAChB,mBAAO,UAAU,GAAV,CAAP;AACH;AACD;AACH;AACD,aAAS,SAAT,CAAmB,EAAnB,EAAsB;AAClB,WAAG,SAAH,EAAa,QAAb;AACH;AACD,cAAU,EAAV;AACH,CAtDD","file":"index-compiled.js","sourcesContent":["/**\n * Created by caolei on 16/9/2.\n */\nconst PENDING = '0'\nconst FULFILLED = '1'\nconst REJECTED = '2'\nexport default Promise = function(fn){\n    let state = PENDING,\n        handlers = [],\n        value = null;\n\n    function handle(obj){\n        if(state === PENDING){\n            handlers.push(obj)\n        }\n        if(state === FULFILLED){\n            obj.onFulfilled(value)\n        }\n        if(state === REJECTED){\n            obj.onRejected(value)\n        }\n    }\n    this.done = function(onFulfilled,onRejected){\n        handle({\n            onFulfilled:onFulfilled,\n            onRejected:onRejected\n        })\n    }\n    this.then = function(onResolve,onReject){\n        var self = this;\n        return new Promise((resolve,reject)=>{\n            self.done((data)=>{\n                resolve(onResolve(data))},()=>{})\n        })\n    }\n\n    function onFulfill(val){\n        value = val\n        state = FULFILLED\n        handlers.map(item=>{\n            handle(item)\n        })\n    }\n    function onReject(val){\n        value = val\n        state = REJECTED\n        handlers.map(item=>{\n            handle(item)\n        })\n    }\n    function onResolve(val){\n        if(val && !val.then){\n            return onFulfill(val)\n        }\n        //如果返回的是一个promise\n    }\n    function doResolve(fn){\n        fn(onResolve,onReject)\n    }\n    doResolve(fn)\n}\n\n\n\n\n"]}